{"version":3,"sources":["recipe.module.css","Recipe.js","App.js","index.js"],"names":["module","exports","Recipe","title","calories","image","ingredients","health","className","style","recipe","h1","src","alt","map","ingredient","text","healtyInfo","one","toFixed","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","target","key","label","healthLabels","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kFACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,YAAc,4BAA4B,MAAQ,sBAAsB,WAAa,6B,6MC0BxHC,EAxBA,SAAC,GAAqD,IAAnDC,EAAkD,EAAlDA,MAAOC,EAA2C,EAA3CA,SAAUC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,YAAaC,EAAa,EAAbA,OACnD,OACI,yBAAKC,UAAWC,IAAMC,QAClB,wBAAIF,UAAWC,IAAME,IAAKR,GAC1B,yBAAKK,UAAWC,IAAMJ,MAAOO,IAAKP,EAAOQ,IAAI,MAC7C,uCACA,wBAAIL,UAAWC,IAAMH,aAChBA,EAAYQ,KAAI,SAAAC,GAAU,OACvB,4BAAKA,EAAWC,UAOxB,uBAAGR,UAAWC,IAAMQ,YAAY,2CAAhC,IAAqDV,EAAOO,KAAI,SAAAI,GAAG,OAC/D,kCAAQA,EAAR,UAGJ,uBAAGV,UAAWC,IAAMQ,YAAY,wCAAhC,IAAkDb,EAASe,aC0CxDC,G,MA3DH,WAEV,IAFgB,EAMcC,mBAAS,IANvB,mBAMTC,EANS,KAMAC,EANA,OAOYF,mBAAS,IAPrB,mBAOTG,EAPS,KAODC,EAPC,OASUJ,mBAAS,WATnB,mBASTK,EATS,KASFC,EATE,KAWhBC,qBAAU,WACRC,MAGC,CAACH,IAEJ,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OAAoCL,EAApC,mBAhBf,WAgBe,oBAfd,qCAcG,cACXM,EADW,gBAEEA,EAASC,OAFX,OAEXC,EAFW,OAGjBX,EAAWW,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MAJA,2CAAH,qDAiBhB,OACE,yBAAK3B,UAAU,OACb,6CACA,qEACA,0BAAM8B,SAVQ,SAAAC,GAChBA,EAAEC,iBACFb,EAASH,GACTC,EAAU,KAOmBjB,UAAU,eACnC,2BAAOA,UAAU,aAAaiC,KAAK,OAAOC,MAAOlB,EAAQmB,SAf1C,SAAAJ,GACnBd,EAAUc,EAAEK,OAAOF,UAef,4BAAQlC,UAAU,gBAAgBiC,KAAK,UAAvC,WAGF,yBAAKjC,UAAU,WACZc,EAAQR,KAAI,SAAAJ,GAAM,OACjB,kBAAC,EAAD,CACEmC,IAAKnC,EAAOA,OAAOoC,MACnB3C,MAAOO,EAAOA,OAAOoC,MACrB1C,SAAUM,EAAOA,OAAON,SACxBC,MAAOK,EAAOA,OAAOL,MACrBC,YAAaI,EAAOA,OAAOJ,YAC3BC,OAAQG,EAAOA,OAAOqC,sBCnDlCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.07686de5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__3Xc0m\",\"ingredients\":\"recipe_ingredients__fIn8M\",\"image\":\"recipe_image__24l3w\",\"healtyInfo\":\"recipe_healtyInfo__4u3yX\"};","import React from 'react';\nimport style from './recipe.module.css';\n\nconst Recipe = ({ title, calories, image, ingredients, health }) => {\n    return (\n        <div className={style.recipe}>\n            <h1 className={style.h1}>{title}</h1>\n            <img className={style.image} src={image} alt=\"#\" />\n            <h3>Recipe:</h3>\n            <ol className={style.ingredients}>\n                {ingredients.map(ingredient => (\n                    <li>{ingredient.text}</li>\n                ))}\n            </ol>\n            {/* <p><b>Healty info:</b> {health.map(one => (\n                <p> {one.split('---')} </p>\n            ))}</p> */}\n\n            <p className={style.healtyInfo}><b>Healty info:</b> {health.map(one => (\n                <span> {one}. </span>\n            ))}</p>\n\n            <p className={style.healtyInfo}><b>Calories:</b> {calories.toFixed()}</p>\n        </div>\n    )\n}\n\nexport default Recipe;","import React, { useEffect, useState } from 'react';\nimport Recipe from './Recipe';\nimport './App.css';\n\n\nconst App = () => {\n\n  const APP_ID = \"2a17cdce\";\n  const APP_KEY = \"71901ade129a360dc95fa842b1f10f63\";\n\n  // here we set the state\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState('');\n  // we set query because we dont want to refresh the app every time when user add new letter in the search bar\n  const [query, setQuery] = useState('chicken');\n\n  useEffect(() => {\n    getRecipes();\n    // it will be updated only when user click search button\n    // useEffect only run when query is changing (button is clicked)\n  }, [query]);\n\n  const getRecipes = async () => {\n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n    const data = await response.json();\n    setRecipes(data.hits);\n    console.log(data.hits)\n  };\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n  };\n\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch('');\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Recipe Search</h1>\n      <p>(enter the ingredient you want to eat)</p>\n      <form onSubmit={getSearch} className=\"search-form\">\n        <input className=\"search-bar\" type=\"text\" value={search} onChange={updateSearch} />\n        <button className=\"search-button\" type=\"submit\">Search</button>\n      </form>\n\n      <div className=\"recipes\">\n        {recipes.map(recipe => (\n          <Recipe\n            key={recipe.recipe.label}\n            title={recipe.recipe.label}\n            calories={recipe.recipe.calories}\n            image={recipe.recipe.image}\n            ingredients={recipe.recipe.ingredients}\n            health={recipe.recipe.healthLabels} />\n        ))}\n      </div>\n    </div>\n  )\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}